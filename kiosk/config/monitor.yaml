
# CalendarBot Kiosk Watchdog Configuration
# Optimized for Raspberry Pi Zero 2 with minimal resource usage

monitor:
  # Health check intervals and settings
  health_check:
    # Primary health endpoint check interval (seconds)
    interval_s: 30
    # HTML render probe interval (seconds) - heavier check
    render_probe_interval_s: 60
    # X session responsiveness check interval (seconds)
    x_health_interval_s: 120
    # Maximum retries for transient failures before escalating
    max_retries: 3
    # Request timeout for health checks (seconds)
    request_timeout_s: 6
    # Base URL for health checks - will resolve to local IP
    base_url: "http://127.0.0.1:8080"
    # HTML marker to look for in render probe
    render_marker: 'name="calendarbot-ready"'

  # Failure thresholds and escalation criteria
  thresholds:
    # Factor to multiply refresh interval for staleness detection
    refresh_miss_factor: 2
    # Number of consecutive render probe failures before escalation
    render_fail_count: 2
    # Maximum browser restarts per hour before escalating
    max_browser_restarts_per_hour: 4
    # Maximum service restarts per hour before escalating  
    max_service_restarts_per_hour: 2
    # Maximum reboots per 24 hours (last resort)
    max_reboots_per_day: 1
    # Minimum seconds between recovery actions of same level
    recovery_cooldown_s: 60

  # System commands for browser and service management
  commands:
    # Command to detect running browser process
    browser_detect_cmd: "pgrep -f 'chromium.*--kiosk' || pgrep -f 'epiphany.*--kiosk'"
    # Command to launch browser (will be executed via shell)
    browser_launch_cmd: |
      export DISPLAY=:0 && cd /home/{user} && 
      chromium --no-memcheck --kiosk --enable-low-end-device-mode --noerrdialogs \
        --no-first-run --no-default-browser-check \
        --disable-session-crashed-bubble \
        --overscroll-history-navigation=0 \
        --disable-vulkan --disable-gpu-compositing \
        --disable-background-networking --disable-component-update \
        --disable-sync --no-pings \
        --disable-features=NetworkService,OnDeviceModel,PushMessaging \
        http://$(hostname -I | awk '{{print $1}}'):8080 &
    # Command to gracefully stop browser
    browser_stop_cmd: "pkill -TERM -f 'chromium.*--kiosk'; sleep 8; pkill -KILL -f 'chromium.*--kiosk' 2>/dev/null || true"
    # Command to check X server availability  
    x_health_cmd: "DISPLAY=:0 xdpyinfo >/dev/null 2>&1"
    # Systemd unit name for kiosk service
    kiosk_systemd_unit: "calendarbot-kiosk@{user}.service"
    # Command to restart kiosk service
    service_restart_cmd: "systemctl --user restart {kiosk_systemd_unit}"
    # Command to check if port is in use
    port_check_cmd: "ss -ltn | grep :8080 || lsof -i :8080"

  # Logging configuration
  logging:
    # Local log directory (will be created if needed)
    local_log_dir: "/var/log/calendarbot-watchdog"
    # Log level: DEBUG, INFO, WARN, ERROR
    log_level: "INFO"
    # Maximum log file size before rotation (MB)
    max_log_size_mb: 2
    # Number of rotated log files to keep
    log_files_to_keep: 7
    # Enable JSON structured logging
    json_logging: true
    # Log to systemd journal as well
    journal_logging: true

  # Resource monitoring and graceful degradation
  resource_limits:
    # Minimum free memory (KB) before degrading monitoring frequency
    min_free_mem_kb: 60000
    # Maximum 1-minute load average before degrading monitoring
    max_load_1m: 1.5
    # Degradation factor for intervals when under resource pressure
    degradation_factor: 2.0
    # Enable automatic throttling under system load
    auto_throttle: true

  # Remote monitoring and alerting (disabled by default)
  remote:
    # Enable remote webhook notifications
    webhook_enabled: false
    # Webhook URL for critical alerts (HTTPS recommended)
    webhook_url: ""
    # Maximum webhook notifications per hour (rate limiting)
    max_webhooks_per_hour: 2
    # Webhook timeout (seconds)
    webhook_timeout_s: 10
    # Include system diagnostics in webhook payload
    include_diagnostics: true

  # State persistence settings
  state:
    # File to store persistent watchdog state
    state_file: "/var/local/calendarbot-watchdog/state.json"
    # Lockfile to prevent concurrent watchdog instances
    lock_file: "/tmp/calendarbot-watchdog.lock"
    # Lock timeout (seconds) - how long to wait for lock
    lock_timeout_s: 30

  # Recovery escalation levels
  recovery:
    # Level 0: Transient retry backoff intervals (seconds)
    retry_intervals: [10, 20, 40]
    # Level 1: Browser restart settings
    browser_restart:
      # Grace period for browser to exit after TERM signal (seconds)
      term_grace_period_s: 8
      # Wait time after restart before verification (seconds)
      restart_verification_delay_s: 30
    # Level 2: X session restart settings  
    x_restart:
      # Command to restart X session/window manager
      restart_cmd: "systemctl --user restart graphical-session.target || pkill -f matchbox-window-manager; sleep 2"
      # Verification delay after X restart (seconds)
      verification_delay_s: 45
    # Level 3: Service restart settings
    service_restart:
      # Verification delay after service restart (seconds)
      verification_delay_s: 60
      # Maximum wait time for service to become ready (seconds)
      max_wait_s: 120
    # Level 4: System reboot settings
    reboot:
      # Delay before initiating reboot (seconds) - allows log shipping
      reboot_delay_s: 30
      # Command to initiate system reboot
      reboot_cmd: "sudo /sbin/reboot"

# Environment variable overrides (optional)
# These can be set to override config values:
# CALENDARBOT_WATCHDOG_LOG_LEVEL - Override logging.log_level
# CALENDARBOT_WATCHDOG_DEBUG - Set to "true" to enable debug mode
# CALENDARBOT_WATCHDOG_DEGRADED - Set to "true" to force degraded mode
# CALENDARBOT_WATCHDOG_DISABLED - Set to "true" to disable all recovery actions