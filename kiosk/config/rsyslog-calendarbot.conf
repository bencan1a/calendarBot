# CalendarBot rsyslog Configuration
# Place this file in /etc/rsyslog.d/50-calendarbot.conf
# Restart rsyslog service after installation: sudo systemctl restart rsyslog

# CalendarBot log filtering and forwarding rules
# Optimized for Pi Zero 2W with minimal CPU overhead

# Create separate log files for CalendarBot components
$template CalendarBotFormat,"%timestamp:::date-rfc3339% %hostname% %syslogtag%%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%\n"

# Filter CalendarBot server logs
:programname, isequal, "calendarbot-server" /var/log/calendarbot/server.log;CalendarBotFormat
& stop

# Filter CalendarBot watchdog logs  
:programname, isequal, "calendarbot-watchdog" /var/log/calendarbot/watchdog.log;CalendarBotFormat
& stop

# Filter CalendarBot log shipper logs
:programname, isequal, "calendarbot-log-shipper" /var/log/calendarbot/log-shipper.log;CalendarBotFormat
& stop

# Filter other CalendarBot components
:programname, startswith, "calendarbot-" /var/log/calendarbot/misc.log;CalendarBotFormat
& stop

# High-priority event forwarding (ERROR and CRITICAL only)
# Forward to remote syslog server if configured
if $programname startswith "calendarbot-" and $syslogseverity <= 3 then {
    # Forward to remote server (configure REMOTE_SYSLOG_SERVER environment variable)
    action(type="omfwd"
           target="`echo $CALENDARBOT_REMOTE_SYSLOG_SERVER`"
           port="`echo $CALENDARBOT_REMOTE_SYSLOG_PORT`"
           protocol="tcp"
           action.resumeRetryCount="10"
           action.resumeInterval="30"
           queue.type="LinkedList"
           queue.size="1000"
           queue.filename="calendarbot-remote"
           queue.maxDiskSpace="50m"
           queue.saveOnShutdown="on")
    
    # Also log locally for backup
    /var/log/calendarbot/critical.log;CalendarBotFormat
}

# Rate limiting for CalendarBot logs to prevent disk overflow
$SystemLogRateLimitInterval 10
$SystemLogRateLimitBurst 50

# Log rotation directives (works with logrotate)
$FileCreateMode 0644
$DirCreateMode 0755
$Umask 0022

# Create CalendarBot log directory if it doesn't exist
$CreateDirs on

# CalendarBot-specific log rotation signal
# This sends SIGHUP to processes when logs are rotated
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

# JSON log parsing for structured CalendarBot logs
# Extract JSON messages and forward structured data
module(load="mmjsonparse")

# Template for JSON formatting
template(name="CalendarBotJSONFormat" type="string" string="%msg%\n")

# Parse JSON messages from CalendarBot components
if $programname startswith "calendarbot-" then {
    action(type="mmjsonparse" cookie="")
    
    # If JSON parsing succeeds, use structured format
    if $parsesuccess == "OK" then {
        # Extract structured fields for better filtering
        set $.component = $!component;
        set $.level = $!level;
        set $.event = $!event;
        
        # Forward critical structured events to monitoring
        if $.level == "CRITICAL" or ($.level == "ERROR" and $!recovery_level > 0) then {
            # Log to monitoring-specific file for processing by other scripts
            /var/log/calendarbot/monitoring-events.log;CalendarBotJSONFormat
            
            # Forward to remote monitoring endpoint if configured
            if $CALENDARBOT_REMOTE_MONITORING_ENABLED == "true" then {
                action(type="omfwd"
                       target="`echo $CALENDARBOT_REMOTE_MONITORING_HOST`"
                       port="`echo $CALENDARBOT_REMOTE_MONITORING_PORT`"
                       protocol="tcp"
                       action.resumeRetryCount="5"
                       action.resumeInterval="60")
            }
        }
    }
}

# CalendarBot log file rotation configuration
# Ensure log directory exists and has proper permissions
$FileOwner root
$FileGroup adm
$FileCreateMode 0640
$DirCreateMode 0755

# Rate limiting specific to CalendarBot to prevent log spam
if $programname startswith "calendarbot-" then {
    # Apply rate limiting: max 100 messages per 60 seconds
    action(type="omfile"
           file="/var/log/calendarbot/rate-limited.log"
           template="CalendarBotFormat"
           action.ratelimit.interval="60"
           action.ratelimit.burst="100")
}

# Emergency logging for critical CalendarBot failures
# These logs bypass normal processing for system recovery
if $programname startswith "calendarbot-" and ($msg contains "reboot" or $msg contains "CRITICAL") then {
    # Emergency log that's always written
    /var/log/calendarbot/emergency.log;CalendarBotFormat
    
    # Also send to console for immediate attention
    /dev/console
}

# Debugging: Log all CalendarBot messages if debug mode enabled
if $CALENDARBOT_SYSLOG_DEBUG == "true" then {
    if $programname startswith "calendarbot-" then {
        /var/log/calendarbot/debug-all.log;CalendarBotFormat
    }
}

# Statistics collection for CalendarBot logs
# This creates statistics that can be queried by monitoring scripts
$ModLoad impstats
$PStatsInterval 300  # 5 minutes
$ResetConfigVariables

# CalendarBot-specific statistics
if $programname startswith "calendarbot-" then {
    # Count messages by severity
    action(type="omfile"
           file="/var/log/calendarbot/stats.log"
           template="RSYSLOG_FileFormat")
}