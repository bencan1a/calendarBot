[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "calendarbot"
dynamic = ["version"]
description = "ICS Calendar Display Bot for Raspberry Pi with e-ink display and web interface"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "CalendarBot Team", email = "support@calendarbot.local"}
]
maintainers = [
    {name = "CalendarBot Team", email = "support@calendarbot.local"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Scheduling",
    "Topic :: System :: Hardware",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
    "Topic :: Communications",
    "Framework :: AsyncIO",
]
keywords = [
    "calendar",
    "ics",
    "microsoft365",
    "outlook",
    "google-calendar",
    "raspberry-pi",
    "e-ink",
    "display",
    "web-interface",
    "async"
]
requires-python = ">=3.8"
dependencies = [
    "icalendar>=5.0.0",
    "httpx>=0.25.0",
    "aiosqlite>=0.19.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "PyYAML>=6.0",
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
    "cryptography>=41.0.0",
    "APScheduler>=3.10.0",
    "psutil>=5.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-timeout>=2.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
]
rpi = [
    "RPi.GPIO>=0.7.1",
    "spidev>=3.5",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]

[project.urls]
Homepage = "https://github.com/calendarbot/calendarbot"
Documentation = "https://github.com/calendarbot/calendarbot#readme"
Repository = "https://github.com/calendarbot/calendarbot"
"Bug Tracker" = "https://github.com/calendarbot/calendarbot/issues"
Changelog = "https://github.com/calendarbot/calendarbot/blob/main/CHANGELOG.md"

[project.scripts]
calendarbot = "calendarbot.__main__:main"

[project.gui-scripts]
# Future GUI entry points can be added here

[tool.setuptools]
package-dir = {"" = "."}
packages = {find = {}}

[tool.setuptools.package-data]
calendarbot = [
    "py.typed",
    "web/static/*.css",
    "web/static/*.js",
    "web/static/layouts/**/*.css",
    "web/static/layouts/**/*.js",
    "web/static/layouts/**/*.json",
    "web/templates/*.html",
    "theme-images/*.bmp",
]
config = [
    "config.yaml.example",
]

[tool.setuptools.dynamic]
version = {attr = "calendarbot.__version__"}

# Development tool configurations
[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.bandit]
# Bandit security analysis configuration
exclude_dirs = ["tests", "venv", ".venv", "build", "dist"]
skips = [
    "B101",  # Test for use of assert
    "B601",  # Parameterized shell calls (we validate inputs)
    "B603",  # Subprocess without shell - validated subprocess usage with input sanitization
    "B404",  # Subprocess module import - we use validated subprocess calls with proper security
]
severity = "medium"  # Flag medium and high severity issues
confidence = "medium"  # Flag medium and high confidence issues

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
explicit_package_bases = true
# Exclude build artifacts, test files, and utility scripts from strict type checking
exclude = [
    "venv/",
    ".venv/",
    "build/",
    "dist/",
    "tests/",
    "backup/",
    "scripts/"
]

[[tool.mypy.overrides]]
module = [
    "icalendar.*",
    "aiosqlite.*",
    "APScheduler.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
# Consolidated pytest configuration (migrated from pytest.ini)
minversion = "7.0"

# Test discovery settings
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Exclude problematic directories from test discovery
norecursedirs = [
    "bad_unit_tests",
    "backup",
    ".git",
    "__pycache__",
    ".pytest_cache",
    "*.egg-info",
    "MagicMock"
]

# Comprehensive test execution options (merged from both files)
addopts = [
    "-ra",                    # Show extra test summary info for all except passed
    "--strict-markers",       # Treat unregistered markers as errors
    "--strict-config",        # Treat configuration errors as errors
    "--verbose",              # Verbose output
    "--tb=short",             # Short traceback format
    "--maxfail=10",           # Stop after 10 failures
    "--durations=10",         # Show 10 slowest tests
]

# Async test support
asyncio_mode = "auto"

# Console logging configuration
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Warning filters (comprehensive approach)
filterwarnings = [
    "error",                              # Convert warnings to errors by default
    "ignore::UserWarning",                # Ignore user warnings
    "ignore::DeprecationWarning",         # Ignore deprecation warnings
    "ignore::RuntimeWarning",             # Ignore runtime warnings
    "ignore::PendingDeprecationWarning",  # Ignore pending deprecation warnings
    "ignore::ResourceWarning",            # Ignore resource warnings
    "ignore::ImportWarning",              # Ignore import warnings
    "ignore::FutureWarning",              # Ignore future warnings
]

# Comprehensive test markers (merged from both configurations)
markers = [
    # Basic test categories
    "unit: Fast unit tests",
    "integration: Integration tests requiring external dependencies",
    "e2e: End-to-end tests for complete workflows",
    
    # Browser and UI testing
    "browser: Browser-based validation tests",
    "accessibility: Accessibility and WCAG compliance tests",
    "cross_browser: Cross-browser compatibility tests",
    "visual_regression: Visual regression and screenshot comparison tests",
    "responsive: Responsive design and viewport tests",
    
    # Security and network
    "security: Security-focused tests and vulnerability checks",
    "network: Tests that require network access",
    
    # Performance and execution characteristics
    "performance: Performance and load tests",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "fast: Quick-executing tests (under 30 seconds)",
    
    # CI/CD and workflow
    "critical_path: Core functionality tests for CI/CD pipeline (fast execution)",
    "critical: Critical path tests for CI/CD",
    "smoke: Basic functionality verification tests",
    "regression: Full regression testing",
    "targeted: Tests selected based on code changes",
    
    # Coverage and validation
    "coverage: Tests specifically for coverage validation",
]

[tool.coverage.run]
# Comprehensive coverage configuration (migrated from .coveragerc)
source = ["calendarbot"]
branch = true
parallel = true

# Note: include is not needed when source is set - source already specifies what to include

# Files to exclude from coverage analysis
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/migrations/*",
    "scripts/*",
    "setup.py",
    "manage.py",
]

[tool.coverage.report]
# Coverage reporting options with quality thresholds
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Minimum coverage thresholds and reporting options
fail_under = 60
precision = 2
show_missing = true
skip_covered = false
skip_empty = true

[tool.coverage.html]
# HTML report configuration
directory = "htmlcov"
title = "CalendarBot Test Coverage Report"

[tool.coverage.xml]
# XML report for CI integration
output = "coverage.xml"
