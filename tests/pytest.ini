[pytest]
# Sequential execution pytest configuration for CalendarBot test suite
# CRITICAL: This config ensures NO parallel execution for stability

minversion = 6.0
addopts =
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --maxfail=3
    --durations=10
    --disable-warnings
    --capture=no

# CRITICAL: NO parallel execution options
# DO NOT ADD: -n auto, -n <number>, --dist, or any pytest-xdist options

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Markers for different test types
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interactions
    e2e: End-to-end tests for complete workflows
    slow: Tests that take longer to run
    network: Tests that require network access
    security: Security-focused tests
    performance: Performance and load tests
    browser: Tests that use browser automation
    accessibility: Accessibility and WCAG compliance tests
    cross_browser: Cross-browser compatibility tests
    visual_regression: Visual regression and screenshot comparison tests
    responsive: Responsive design and viewport tests
    coverage: Tests specifically for coverage validation
    critical: Critical path tests for CI/CD
    critical_path: Essential tests for CI/CD pipeline (fast execution)
    fast: Quick-executing tests (under 30 seconds)
    smoke: Basic functionality verification tests
    regression: Full regression testing
    targeted: Tests selected based on code changes

# Async support
asyncio_mode = auto

# Timeout for tests
timeout = 300

# Filtering
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:urllib3.*
    ignore::UserWarning:coverage.*

# Coverage configuration is now in .coveragerc
# This section is kept for backward compatibility
[coverage:run]
source = calendarbot
omit =
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    */migrations/*
    */settings/*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml
