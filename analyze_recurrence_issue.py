#!/usr/bin/env python3
"""Analyze the recurrence expansion issue by examining both patterns."""

from datetime import datetime, timedelta


def analyze_missing_instances():
    """Analyze both missing meeting instances to understand the pattern."""

    print("üîç RECURRENCE EXPANSION ISSUE ANALYSIS")
    print("=" * 50)

    # Case 1: Ani <> Ben - 1:1- Bi Weekly (Missing August 18, 2025)
    print("\nüìÖ CASE 1: Ani <> Ben - 1:1- Bi Weekly")
    print("Raw ICS Pattern: FREQ=WEEKLY;UNTIL=20260803T153000Z;INTERVAL=2;BYDAY=MO")
    print("Start: May 26, 2025 08:30 (Monday)")
    print("Pattern: Bi-weekly Mondays until August 3, 2026")
    print("EXDATE: June 23, 2025 (excluded)")

    # Calculate bi-weekly Mondays
    start_date = datetime(2025, 5, 26)
    target_aug18 = datetime(2025, 8, 18)

    current = start_date
    occurrence = 0
    found_aug18 = False

    print("\nCalculated bi-weekly Mondays:")
    while current <= datetime(2026, 8, 3) and occurrence < 20:
        occurrence += 1
        date_str = current.strftime("%Y-%m-%d (%A)")

        if current.date() == datetime(2025, 6, 23).date():
            print(f"  {occurrence:2d}. {date_str} ‚ùå EXCLUDED by EXDATE")
        elif current.date() == target_aug18.date():
            found_aug18 = True
            print(f"  {occurrence:2d}. {date_str} üéØ TARGET - SHOULD EXIST")
        elif occurrence <= 15:
            print(f"  {occurrence:2d}. {date_str}")

        current += timedelta(weeks=2)

    print(f"\n‚úÖ August 18, 2025 SHOULD be generated by RRULE: {found_aug18}")

    # Case 2: Jayson <> Ben - 1:1- Weekly (Missing August 15, 2025)
    print("\n\nüìÖ CASE 2: Jayson <> Ben - 1:1- Weekly")
    print("Raw ICS Pattern: FREQ=WEEKLY;UNTIL=20260814T180000Z;INTERVAL=1;BYDAY=FR")
    print("Start: June 6, 2025 11:00 (Friday)")
    print("Pattern: Weekly Fridays until August 14, 2026")
    print("EXDATE: June 20, June 27, July 4, July 25, 2025 (excluded)")

    # Calculate weekly Fridays
    start_date2 = datetime(2025, 6, 6)
    target_aug15 = datetime(2025, 8, 15)
    excluded_dates = [
        datetime(2025, 6, 20).date(),
        datetime(2025, 6, 27).date(),
        datetime(2025, 7, 4).date(),
        datetime(2025, 7, 25).date(),
    ]

    current2 = start_date2
    occurrence2 = 0
    found_aug15 = False

    print("\nCalculated weekly Fridays:")
    while current2 <= datetime(2026, 8, 14) and occurrence2 < 15:
        occurrence2 += 1
        date_str = current2.strftime("%Y-%m-%d (%A)")

        if current2.date() in excluded_dates:
            print(f"  {occurrence2:2d}. {date_str} ‚ùå EXCLUDED by EXDATE")
        elif current2.date() == target_aug15.date():
            found_aug15 = True
            print(f"  {occurrence2:2d}. {date_str} üéØ TARGET - SHOULD EXIST")
        elif occurrence2 <= 12:
            print(f"  {occurrence2:2d}. {date_str}")

        current2 += timedelta(weeks=1)

    print(f"\n‚úÖ August 15, 2025 SHOULD be generated by RRULE: {found_aug15}")

    # Analysis
    print("\n\nüß™ ROOT CAUSE ANALYSIS")
    print("=" * 30)

    print("\nüìç FINDINGS:")
    print("1. Both missing dates SHOULD be generated by their respective RRULE patterns")
    print("2. Raw ICS from Exchange server does NOT contain individual VEVENTs for these dates")
    print("3. Parser only processes explicit VEVENT components - no client-side expansion")

    print("\nüîç POSSIBLE CAUSES:")
    print("A. Exchange server recurrence expansion bug/limitation")
    print("B. ICS feed query date range limiting server expansion")
    print("C. Missing client-side RRULE expansion in CalendarBot parser")
    print("D. Server-side calendar modifications not reflected in ICS feed")

    print("\nüí° SOLUTION OPTIONS:")
    print("1. Implement client-side RRULE expansion using python-dateutil")
    print("2. Investigate Exchange ICS feed parameters (date range, expansion settings)")
    print("3. Check if server-side calendar has hidden exclusions/modifications")
    print("4. Add recurrence pattern validation and gap detection")

    # Check what day August 15 and 18 actually are
    aug15_day = datetime(2025, 8, 15).strftime("%A")
    aug18_day = datetime(2025, 8, 18).strftime("%A")

    print("\nüìä DATE VERIFICATION:")
    print(f"August 15, 2025 is a {aug15_day} - matches Friday pattern ‚úÖ")
    print(f"August 18, 2025 is a {aug18_day} - matches Monday pattern ‚úÖ")


if __name__ == "__main__":
    analyze_missing_instances()
