<tool_usage_guide>
  <overview>
    Tools and debug helpers for Calendar Diagnostic (Lite) mode.
  </overview>

  <run_commands>
    <command_description>Activate venv and set env (use temporary environment variables for diagnostics)</command_description>
    <command><![CDATA[
. venv/bin/activate
# Do NOT overwrite .env for quick diagnostics. Instead set temporary environment variables in your shell:
export CALENDARBOT_ICS_URL="https://calendar.example.com/cal.ics"
export DATETIME_OVERRIDE="2025-10-30T00:00:00Z"
export CALENDARBOT_DEBUG=true
# Run debug scripts in the same shell so they inherit these variables
]]></command>

    <command_description>Fetch raw ICS to file (use debug helper)</command_description>
    <command><![CDATA[
# Streams ICS using calendarbot_lite.debug_helpers.fetch_ics_stream
python - <<'PY' > /tmp/raw.ics
import asyncio,sys
from calendarbot_lite.debug_helpers import read_env, fetch_ics_stream
env = read_env('.env')
src = env.get('ICS_SOURCE') or os.environ.get('CALENDARBOT_ICS_URL')
if not src:
    print('No ICS source configured'); sys.exit(1)
async def main():
    async for chunk in fetch_ics_stream(src):
        sys.stdout.buffer.write(chunk)
asyncio.run(main())
PY
]]></command>

    <command_description>Run expansion debug script</command_description>
    <command><![CDATA[
python scripts/debug_recurring_events.py --env .env --output /tmp/expansion_debug.json
]]></command>

    <command_description>Run rrule comparison tests</command_description>
    <command><![CDATA[
python scripts/test_rrule_debug.py --env .env
]]></command>
  </run_commands>

  <script_guidelines>
    <description>Available diagnostic scripts</description>
    <item>scripts/debug_recurring_events.py — fetches ICS, parses VEVENTs, runs expansion, writes JSON with detailed traces</item>
    <item>scripts/test_rrule_debug.py — compares lite_rrule_expander output to python-dateutil rrule for validation</item>
    <item>calendarbot_lite/debug_helpers.py — lightweight helper functions for debug scripts (read_env, fetch_ics_stream, etc.)</item>
  </script_guidelines>

  <writing_debug_helpers>
    <description>Recommended new debug helper features to add to scripts</description>
    <item>Structured JSON output with stages: fetch, parse, expand, override_apply, selection</item>
    <item>Per-event logs including UID, raw DTSTART string, parsed tzinfo, normalized UTC</item>
    <item>Optional --limit N to restrict expansions for very large feeds</item>
    <item>Optional --compare-dateutil flag to run an oracle comparison against python-dateutil</item>
  </writing_debug_helpers>

  <python_debug_api>
    <description>Helper functions expected by the debug scripts</description>
    <function name="fetch_raw_ics">
      <purpose>Return raw ICS string and fetch metadata (status, headers, checksum)</purpose>
    </function>
    <function name="parse_vevents">
      <purpose>Return list of parsed VEVENT dicts with UID, DTSTART raw, TZID, RRULE, EXDATE, RECURRENCE-ID</purpose>
    </function>
    <function name="expand_rrule">
      <purpose>Generate occurrence list within given window and return diagnostics (counts, truncated flag)</purpose>
    </function>
  </python_debug_api>

  <example_output>
    <description>Minimal JSON structure produced by debug scripts</description>
    <code language="json"><![CDATA[
{
  "fetch": {"status":200,"length":12345,"checksum":"abc123"},
  "events":[
    {
      "uid":"evt-1@example",
      "raw_dtstart":"20251031T090000",
      "tzid":"America/Los_Angeles",
      "parsed_dtstart":"2025-10-31T16:00:00Z",
      "rrule":"FREQ=WEEKLY;BYDAY=FR",
      "expansion":[ "2025-10-31T16:00:00Z", "2025-11-07T16:00:00Z" ],
      "exdates":[ "2025-11-07T16:00:00Z" ],
      "overrides": []
    }
  ],
  "warnings": ["UID collision for uid ..."]
}
]]></code>
  </example_output>

  <notes>
    <item>Always run in the project's virtualenv; missing deps are usually due to venv not activated.</item>
    <item>Set CALENDARBOT_DEBUG=true to produce structured logs consumed by debug scripts.</item>
  </notes>
</tool_usage_guide>